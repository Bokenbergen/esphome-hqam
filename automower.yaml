esphome:
  name: automower
  friendly_name: automower

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: ""

ota:
  password: ""

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

board: 
    

packages:
  remote_package:
    url: https://github.com/Bokenbergen/esphome-hqam
    ref: main
    refresh: always
    files: [
      components/automower/automower.h,
      components/boards/azd-esp32-v4.yaml
    ]



custom_component:
- lambda: |-
    // update_interval = 15 seconds
    auto my_custom = new Automower(id(uart_bus),5000);
    return {my_custom};
  components:
  - id: automower

text_sensor:
  # - platform: template
  #   name: "Template Text Sensor"
  #   lambda: |-
  #     return {"Hello World"};
  #   update_interval: 60s
  - platform: custom
    lambda: |-
      Automower *mower = (Automower *) id(automower);
      //App.register_component(mower);
      return {mower->lastCodeReceivedTextSensor,mower->modeTextSensor,mower->statusTextSensor}; 
      //,mower->batteryLevelSensor

    text_sensors:
      - id: "last_read_code"
        name: "Last received code"
      - id: "current_mode"
        name: "Mode actuel"
      - id: "status"
        name: "Etat"

sensor:
- platform: custom
  lambda: |-
      Automower *mower = (Automower *) id(automower);
      return {mower->batteryLevelSensor,mower->chargingTimeSensor,mower->batteryUsedSensor,mower->batteryVoltageSensor,mower->firmwareVersionSensor}; 

  sensors:
    - id: batteryLevelSensor
      name: "Battery level"
      unit_of_measurement: mAh
    - id: chargingTimeSensor
      name: "Charging time"
      unit_of_measurement: min
    - id: batteryUsedSensor
      name: "Battery used"
      unit_of_measurement: mAh
    - id: batteryVoltageSensor
      name: "Battery voltage"
      unit_of_measurement: V
    - id: firmwareVersionSensor
      name: "Firmware version"


select:
  - platform: template
    name: "Mode select"
    update_interval: 10s
    options:
      - "MAN"
      - "AUTO"
      - "HOME"
      - "DEMO"
    lambda: |-
      Automower *mower = (Automower *) id(automower);
      return {mower->modeTextSensor->state};
    set_action:
      then:
      - lambda: |-
          Automower *mower = (Automower *) id(automower);
          mower->setMode(x);



# select:
# - platform: custom
#   lambda: |-
#     Automower *mower = (Automower *) id(automower);
#     return {mower->modeSelect};
#   id: mode_select
#   name: "Mode"



button:
  - platform: restart
    name: "Restart"

  - platform: template
    name: "Moteur droit 0x8000"
    on_press:
      - logger.log: Button Moteur droit 0x8000
      - lambda: |-
          Automower *mower = (Automower *) id(automower);
          mower->setRightMotor(0x8000);

  - platform: template
    name: "Moteur droit 0x0000"
    on_press:
      - logger.log: Button Moteur droit 0x0000
      - lambda: |-
          Automower *mower = (Automower *) id(automower);
          mower->setRightMotor(0x0000);

  - platform: template
    name: "Moteur gauche 0x8000"
    on_press:
      - logger.log: Button Moteur gauche 0x8000
      - lambda: |-
          Automower *mower = (Automower *) id(automower);
          mower->setLeftMotor(0x8000);

  - platform: template
    name: "Moteur gauche 0x0000"
    on_press:
      - logger.log: Button Moteur gauche 0x0000
      - lambda: |-
          Automower *mower = (Automower *) id(automower);
          mower->setLeftMotor(0x0000);

  
  - platform: template
    name: "Mode 0D"
    on_press:
      - logger.log: Mode 0D
      - lambda: |-
          Automower *mower = (Automower *) id(automower);
          mower->setMode0D();
  - platform: template
    name: "Mode 9A"
    on_press:
      - logger.log: Mode 9A
      - lambda: |-
          Automower *mower = (Automower *) id(automower);
          mower->setMode9A();
  - platform: template
    name: "Mode 99"
    on_press:
      - logger.log: Mode 99
      - lambda: |-
          Automower *mower = (Automower *) id(automower);
          mower->setMode99();


  - platform: template
    name: "Key 0"
    on_press:
      - logger.log: Key 0
      - lambda: |-
          Automower *mower = (Automower *) id(automower);
          mower->numKey(0x00);
  - platform: template
    name: "Key 1"
    on_press:
      - logger.log: Key 1
      - lambda: |-
          Automower *mower = (Automower *) id(automower);
          mower->numKey(0x01);
  - platform: template
    name: "Key 2"
    on_press:
      - logger.log: Key 2
      - lambda: |-
          Automower *mower = (Automower *) id(automower);
          mower->numKey(0x02);
  - platform: template
    name: "Key 3"
    on_press:
      - logger.log: Key 3
      - lambda: |-
          Automower *mower = (Automower *) id(automower);
          mower->numKey(0x03);
  - platform: template
    name: "Key 4"
    on_press:
      - logger.log: Key 4
      - lambda: |-
          Automower *mower = (Automower *) id(automower);
          mower->numKey(0x04);
  - platform: template
    name: "Key 5"
    on_press:
      - logger.log: Key 5
      - lambda: |-
          Automower *mower = (Automower *) id(automower);
          mower->numKey(0x05);
  - platform: template
    name: "Key 6"
    on_press:
      - logger.log: Key 6
      - lambda: |-
          Automower *mower = (Automower *) id(automower);
          mower->numKey(0x06);
  - platform: template
    name: "Key 7"
    on_press:
      - logger.log: Key 7
      - lambda: |-
          Automower *mower = (Automower *) id(automower);
          mower->numKey(0x07);
  - platform: template
    name: "Key 8"
    on_press:
      - logger.log: Key 8
      - lambda: |-
          Automower *mower = (Automower *) id(automower);
          mower->numKey(0x08);
  - platform: template
    name: "Key 9"
    on_press:
      - logger.log: Key 9
      - lambda: |-
          Automower *mower = (Automower *) id(automower);
          mower->numKey(0x09);
  - platform: template
    name: "Key A"
    on_press:
      - logger.log: Key A
      - lambda: |-
          Automower *mower = (Automower *) id(automower);
          mower->numKey(0x0A);
  - platform: template
    name: "Key B"
    on_press:
      - logger.log: Key B
      - lambda: |-
          Automower *mower = (Automower *) id(automower);
          mower->numKey(0x0B);
  - platform: template
    name: "Key C"
    on_press:
      - logger.log: Key C
      - lambda: |-
          Automower *mower = (Automower *) id(automower);
          mower->numKey(0x0C);
  - platform: template
    name: "Key HOME"
    on_press:
      - logger.log: Key Home
      - lambda: |-
          Automower *mower = (Automower *) id(automower);
          mower->numKey(0x0D);
  - platform: template
    name: "Key MAN/AUTO"
    on_press:
      - logger.log: "Key MAN/AUTO"
      - lambda: |-
          Automower *mower = (Automower *) id(automower);
          mower->numKey(0x0E);
  - platform: template
    name: "Key Cancel"
    on_press:
      - logger.log: Key Cancel
      - lambda: |-
          Automower *mower = (Automower *) id(automower);
          mower->numKey(0x0F);
  - platform: template
    name: "Key Up"
    on_press:
      - logger.log: Key Up
      - lambda: |-
          Automower *mower = (Automower *) id(automower);
          mower->numKey(0x10);
  - platform: template
    name: "Key Down"
    on_press:
      - logger.log: Key Down
      - lambda: |-
          Automower *mower = (Automower *) id(automower);
          mower->numKey(0x11);
  - platform: template
    name: "Key Yes"
    on_press:
      - logger.log: Key Yes
      - lambda: |-
          Automower *mower = (Automower *) id(automower);
          mower->numKey(0x12);




time:
  - platform: homeassistant
    id: homeassistant_time
    timezone: "Europe/Paris"
        
# switch:
#   - platform: uart
#     name: "W go home key"
#     data: [0x0F, 0x80, 0x5F, 0x00, 0x0D]
#   - platform: uart
#     name: "W yes key"
#     data: [0x0F, 0x80, 0x5F, 0x00, 0x12]
#   - platform: uart
#     name: "W Cancel key"
#     data: [0x0F, 0x80, 0x5F, 0x00, 0x0F]
#   - platform: uart
#     name: "W auto key"
#     data: [0x0F, 0x80, 0x5F, 0x00, 0x0E]

#   - platform: uart
#     name: "R return fast"
#     data: [0x0F, 0x02, 0x7D, 0x00, 0x00]

#   - platform: uart
#     name: "W return fast 0 "
#     data: [0x0F, 0x82, 0x7D, 0x00, 0x00]

#   - platform: uart
#     name: "W return fast 1"
#     data: [0x0F, 0x82, 0x7D, 0x00, 0x01]

#   - platform: uart
#     name: "R Software Stop"
#     data: [0x0F, 0x01, 0x2F, 0x00, 0x00]
#     # 2=Stop,0=éteint

#   - platform: uart
#     name: "W Software Stop 2=STOP"
#     data: [0x0F, 0x81, 0x2F, 0x00, 0x02]
    
#   - platform: uart
#     name: "W Software Stop 0=pasSTOP"
#     data: [0x0F, 0x81, 0x2F, 0x00, 0x00]
    

#   - platform: uart
#     name: "R Software Stop status"
#     data: [0x0F, 0x43, 0x78, 0x00, 0x00]
#     # 1=allumé,0=éteint

#   - platform: uart
#     name: "R Statuscode"
#     data: [0x0F, 0x01, 0xF1, 0x00, 0x00]    

#   - platform: uart
#     name: "R heure"
#     data: [0x0F, 0x36, 0xB5, 0x00, 0x00]


#   - platform: uart
#     name: "R minuterie status"
#     data: [0x0F, 0x4A, 0x4E, 0x00, 0x00]

#   - platform: uart
#     name: "W minuterie => allumer "
#     data: [0x0F, 0xCA, 0x4E, 0x00, 0x01]

#   - platform: uart
#     name: "W minuterie => éteindre"
#     data: [0x0F, 0xCA, 0x4E, 0x00, 0x00]    



#   - platform: uart
#     name: "R Timer 1"
#     data: [0x0F, 0x4A, 0x38, 0x00, 0x00]


#   - platform: uart
#     name: "R mode"
#     data: [0x0F, 0x01, 0x2C, 0x00, 0x00]

#   - platform: uart
#     name: "W mode => 0 MAN "
#     data: [0x0F, 0x81, 0x2C, 0x00, 0x00]
#   - platform: uart
#     name: "W mode => 1 AUTO "
#     data: [0x0F, 0x81, 0x2C, 0x00, 0x01]
#   - platform: uart
#     name: "W mode => 3 HOME "
#     data: [0x0F, 0x81, 0x2C, 0x00, 0x03]
#   - platform: uart
#     name: "W mode => 4 DEMO "
#     data: [0x0F, 0x81, 0x2C, 0x00, 0x04]



    
      # "W_MODE_MAN"  {set hexin "0F812C0000"}
      # "W_MODE_AUTO" {set hexin "0F812C0001"}
      # "W_MODE_HOME" {set hexin "0F812C0003"}
      # "W_MODE_DEMO" {set hexin "0F812C0004"}


      # "W_KEY_0" {set hexin "0F805F0000"}
      # "W_KEY_1" {set hexin "0F805F0001"}
      # "W_KEY_2" {set hexin "0F805F0002"}
      # "W_KEY_3" {set hexin "0F805F0003"}
      # "W_KEY_4" {set hexin "0F805F0004"}
      # "W_KEY_5" {set hexin "0F805F0005"}
      # "W_KEY_6" {set hexin "0F805F0006"}
      # "W_KEY_7" {set hexin "0F805F0007"}
      # "W_KEY_8" {set hexin "0F805F0008"}
      # "W_KEY_9" {set hexin "0F805F0009"}
      # "W_PRG_A" {set hexin "0F805F000A"}
      # "W_PRG_B" {set hexin "0F805F000B"}
      # "W_PRG_C" {set hexin "0F805F000C"}
      # "W_KEY_HOME" {set hexin "0F805F000D"}
      # "W_KEY_MANAUTO" {set hexin "0F805F000E"}
      # "W_KEY_C" {set hexin "0F805F000F"}
      # "W_KEY_UP" {set hexin "0F805F0010"}
      # "W_KEY_DOWN" {set hexin "0F805F0011"}
      # "W_KEY_YES" {set hexin "0F805F0012"}

#   "R_STATUS" {set hexin "0F01F10000"}
# "R_SEKUNDE" {set hexin "0F36B10000"}
# "R_MINUTE" {set hexin "0F36B30000"}
# "R_STUNDE" {set hexin "0F36B50000"}
# "R_TAG" {set hexin "0F36B70000"}
# "R_MONAT" {set hexin "0F36B90000"}
# "R_JAHR" {set hexin "0F36BD0000"}
# "R_TIMERSTATUS" {set hexin "0F4A4E0000"}
# "R_WOCHEN-TIMER1-START-STD" {set hexin "0F4A380000"}
# "R_WOCHEN-TIMER1-START-MIN" {set hexin "0F4A390000"}
# "R_WOCHEN-TIMER1-STOP-STD" {set hexin "0F4A3A0000"}
# "R_WOCHEN-TIMER1-STOP-MIN" {set hexin "0F4A3B0000"}
# "R_WOCHENEND-TIMER1-START-STD" {set hexin "0F4A3C0000"}
# "R_WOCHENEND-TIMER1-START-MIN" {set hexin "0F4A3D0000"}
# "R_WOCHENEND-TIMER1-STOP-STD" {set hexin "0F4A3E0000"}
# "R_WOCHENEND-TIMER1-STOP-MIN" {set hexin "0F4A3F0000"}
# "R_WOCHEN-TIMER2-START-STD" {set hexin "0F4A400000"}
# "R_WOCHEN-TIMER2-START-MIN" {set hexin "0F4A410000"}
# "R_WOCHEN-TIMER2-STOP-STD" {set hexin "0F4A420000"}
# "R_WOCHEN-TIMER2-STOP-MIN" {set hexin "0F4A430000"}
# "R_WOCHENEND-TIMER2-START-STD" {set hexin "0F4A440000"}
# "R_WOCHENEND-TIMER2-START-MIN" {set hexin "0F4A450000"}
# "R_WOCHENEND-TIMER2-STOP-STD" {set hexin "0F4A460000"}
# "R_WOCHENEND-TIMER2-STOP-MIN" {set hexin "0F4A470000"}
# "R_TIMER-TAGE" {set hexin "0F4A500000"}
# "R_TIMER-STATUS" {set hexin "0F4A4E0000"}
# "R_WOCHENTIMER-TAGE" {set hexin "0F4A500000"}
# "R_MAEHZEIT" {set hexin "0F00380000"}
# "R_VIERECKMODUS-STATUS" {set hexin "0F01380000"}
# "R_VIERECKMODUS-PROZENT" {set hexin "0F01340000"}
# "R_VIERECKMODUS-STATUS" {set hexin "0F01370000"}
# "R_AKKU-LADEZEIT_MIN" {set hexin "0F01EC0000"}
# "R_AKKU-KAPAZITAET_MA" {set hexin "0F01EB0000"}
# "R_AKKU-KAPAZITAET_MAH" {set hexin "0F01EF0000"}
# "R_AKKU-KAPAZITAET-SUCHSTART_MAH" {set hexin "0F01EF0000"}
# "R_AKKU-KAPAZITAET-GENUTZT_MAH" {set hexin "0F2EE00000"}
# "R_AKKU-SPANNUNG_MV" {set hexin "0F2EF40000"}
# "R_AKKU-TEMPERATUR-AKTUELL" {set hexin "0F02330000"}
# "R_AKKU-TEMPERATUR-LADEN" {set hexin "0F02350000"}
# "R_AKKU-LETZTER-LADEVORGANG_MIN" {set hexin "0F02350000"}
# "R_AKKU-NAECHSTE_TEMPERATURMESSUNG_SEK" {set hexin "0F02360000"}
# "R_GESCHWINDIGKEIT-MESSERMOTOR" {set hexin "0F2EEA0000"}
# "R_GESCHWINDIGKEIT-RECHTS" {set hexin "0F24BF0000"}
# "R_GESCHWINDIGKEIT-LINKS" {set hexin "0F24C00000"}
# "R_FIRMWARE-VERSION" {set hexin "0F33900000"}
# "R_SPRACHDATEI-VERSION" {set hexin "0F3AC00000"}
# "W_TIMERAKTIV" {set hexin "0FCA4E0000"}
# "W_TIMERINAKTIV" {set hexin "0FCA4E0001"}
# "W_MODE_HOME" {set hexin "0F812C0003"}
# "W_MODE_MAN" {set hexin "0F812C0000"}
# "W_MODE_AUTO" {set hexin "0F812C0001"}
# "W_MODE_DEMO" {set hexin "0F812C0004"}
# "W_KEY_0" {set hexin "0F805F0000"}
# "W_KEY_1" {set hexin "0F805F0001"}
# "W_KEY_2" {set hexin "0F805F0002"}
# "W_KEY_3" {set hexin "0F805F0003"}
# "W_KEY_4" {set hexin "0F805F0004"}
# "W_KEY_5" {set hexin "0F805F0005"}
# "W_KEY_6" {set hexin "0F805F0006"}
# "W_KEY_7" {set hexin "0F805F0007"}
# "W_KEY_8" {set hexin "0F805F0008"}
# "W_KEY_9" {set hexin "0F805F0009"}
# "W_PRG_A" {set hexin "0F805F000A"}
# "W_PRG_B" {set hexin "0F805F000B"}
# "W_PRG_C" {set hexin "0F805F000C"}
# "W_KEY_HOME" {set hexin "0F805F000D"}
# "W_KEY_MANAUTO" {set hexin "0F805F000E"}
# "W_KEY_C" {set hexin "0F805F000F"}
# "W_KEY_UP" {set hexin "0F805F0010"}
# "W_KEY_DOWN" {set hexin "0F805F0011"}
# "W_KEY_YES" {set hexin "0F805F0012"}
